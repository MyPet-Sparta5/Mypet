name: CI/CD Pipeline

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Build Docker image
        run: docker build -t minhyuk0828/mypetdb:${{ github.sha }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: docker push minhyuk0828/mypetdb:${{ github.sha }}

      - name: Deploy to EC2
        if: github.ref == 'refs/heads/develop'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            # 기존 MySQL 서비스 중지 및 비활성화
            sudo systemctl stop mysql || true
            sudo systemctl disable mysql || true

            # Docker Compose 설치 확인 및 설치
            if ! command -v docker compose &> /dev/null
            then
                sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
                sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi

            # 기존 Docker 컨테이너 정리
            docker stop $(docker ps -aq) || true
            docker rm $(docker ps -aq) || true

            # Docker 이미지 pull
            docker pull minhyuk0828/mypetdb:${{ github.sha }}

            # docker-compose.yml 파일 생성
            cat << EOF > docker-compose.yml
            version: '3.8'
            services:
              app:
                image: minhyuk0828/mypetdb:${{ github.sha }}
                ports:
                  - "8080:80"
                env_file: /home/ubuntu/.env
                depends_on:
                  mysql:
                    condition: service_healthy
                  redis:
                    condition: service_healthy
                networks:
                  - mypetdb_network
              mysql:
                platform: linux/x86_64
                image: mysql:8.0
                environment:
                  - MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }}
                  - MYSQL_DATABASE=mypet
                ports:
                  - "3307:3306"
                env_file: /home/ubuntu/.env
                volumes:
                  - mysql_data:/var/lib/mysql
                networks:
                  - mypetdb_network
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
              redis:
                image: redis:7.2
                ports:
                  - "6379:6379"
                volumes:
                  - redis_data:/data
                networks:
                  - mypetdb_network
                healthcheck:
                  test: ["CMD", "redis-cli", "ping"]
                  interval: 10s
                  timeout: 5s
                  retries: 5

            volumes:
              mysql_data:
              redis_data:

            networks:
              mypetdb_network:
                name: mypetdb_network
                driver: bridge
            EOF

            # Docker Compose 실행
            docker compose up -d